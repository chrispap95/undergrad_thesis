#include "Pythia.h" 
#include "TPythia8.h" 
#include "TParticle.h" 
#include "TClonesArray.h" 
#include "TTree.h"
#include "TFile.h"
#include "TSystem.h"
#include "TCanvas.h"
#include "TH1.h"
#include "TError.h"
#include "TLatex.h"
#include "TText.h"

using namespace Pythia8; 	// Let Pythia8:: be implicit.

int main(int argc, char* argv[]) {	// Begin main program.

	if (argc < 2) {
		cerr << "Missing Pythia data card. " << endl;
		return 1;
	}

	if (argc < 3) {
		cerr << "Missing output filename. " << endl;
		return 1;
	}


	const char *p8dataenv = gSystem->Getenv("PYTHIA8DATA");
	if (!p8dataenv) {
		const char *p8env = gSystem->Getenv("PYTHIA8");
		if (!p8env) {
			Error("pythia8.C", "Environment variable PYTHIA8 must contain path to pythia directory!");
			return 1;
		}
		TString p8d = p8env;
		p8d += "/xmldoc";
		gSystem->Setenv("PYTHIA8DATA", p8d);
	}

	const char* path = gSystem->ExpandPathName("$PYTHIA8DATA");
	if (gSystem->AccessPathName(path)) {
		Error("pythia8.C", "Environment variable PYTHIA8DATA must contain path to $PYTHIA8/xmldoc directory !");
		return 1;
	}

	// Set up generation.
	TPythia8* pythia = new TPythia8();
	pythia->ReadConfigFile(argv[1]);	// Read Pythia configuration from data card
	pythia->Initialize(2212, 2212, 13000.); // Initialize Pythia
	Pythia8::Pythia* p8 = pythia->Pythia8();
	int nEvent = p8->mode("Main:numberOfEvents");    // set number of events to generate
	
	// Setup ROOT output
	TFile* f = TFile::Open(argv[2], "RECREATE");
	TClonesArray* particles = new TClonesArray("TParticle", 1000);
	TClonesArray& pref = *particles;
	TTree* t = new TTree("Pythia", "Pythia");
	t->Branch("Event", &pref, 256000, 0);
	particles->BypassStreamer();		

	TCanvas* c1 = new TCanvas("c1", "trial analysis", 1);
	TH1F* h10 = new TH1F("h10", "p_{T} of H; p_{T} (GeV/c)", 100, 0, 400);
	TH1F* h20 = new TH1F("h20", "y of H; y", 100, -5, 5);
	TH1F* h30 = new TH1F("h30", "#eta of H; #eta", 100, -10, 10);
	TH1F* h40 = new TH1F("h40", "E of H; E(GeV)", 100, 0, 2000);
	TH1F* h11 = new TH1F("h11", "p_{T} of J/#psi; p_{T} (GeV/c)", 100, 0, 300);
	TH1F* h21 = new TH1F("h21", "y of J/#psi; y", 100, -6, 6);
	TH1F* h31 = new TH1F("h31", "#eta of J/#psi; #eta", 100, -8, 8);
	TH1F* h41 = new TH1F("h41", "E of J/#psi; E(GeV)", 100, 0, 1600);
	TH1F* h12 = new TH1F("h12", "p_{T} of #mu; p_{T} (GeV/c)", 100, 0, 160);
	TH1F* h22 = new TH1F("h22", "y of #mu; y", 100, -8, 8);
	TH1F* h32 = new TH1F("h32", "#eta of #mu; #eta", 100, -8, 8);
	TH1F* h42 = new TH1F("h42", "E of #mu; E(GeV)", 100, 0, 600);
	TH1F* h13 = new TH1F("h13", "p_{T} of #gamma; p_{T} (GeV/c)", 100, 0, 5);
	TH1F* h23 = new TH1F("h23", "y of #gamma; y", 100, -11, 11);
	TH1F* h33 = new TH1F("h33", "#eta of #gamma; #eta", 100, -11, 11);
	TH1F* h43 = new TH1F("h43", "E of #gamma; E (GeV)", 100, 0, 70);

	TH1F* h00 = new TH1F("h00", "4-momentum conservation", 100, -1000, 1000);
	TH1F* h01 = new TH1F("h01", "m_{J/#psi#gamma}", 100, 0, 200);


	// Generate event(s). (aka "Event loop")
	int prog, oldprog = 0;	// progress indicator variables
	for (int iEvent = 0; iEvent < nEvent; ++iEvent) {
		// print out progress 
		prog = (int)(iEvent * 100. / nEvent);
		if (prog > oldprog) {
			oldprog = prog;
			cout << prog << "\% complete..." << endl;
		}
		pythia->GenerateEvent();
		pref.Clear();
		pythia->ImportParticles(particles,"All");
		Int_t np = particles->GetEntriesFast();
		t->Fill();
		Int_t lastHiggs = 0;
		Int_t lastGamma = 0;
		Int_t lastJpsi = 0;
		Int_t lastMuon = 0;
		Int_t lastAntiMuon = 0;
		for (Int_t ip = 0; ip < np; ip++) {
			TParticle* part = (TParticle*) particles->At(ip);
			Int_t pdg = part->GetPdgCode();
			if (pdg == 25) lastHiggs = ip;
			if (pdg == 22) lastGamma = ip;
			if (pdg == 443) lastJpsi = ip;
			if (pdg == 13) lastMuon = ip;
			if (pdg == -13) lastAntiMuon = ip;

			// if (pdg != 25) continue;
			// Int_t nD = part->GetNDaughters();
			// // Int_t pT = part->Pt();
			// // h2->Fill(pT);
			// for (Int_t iD = 0; iD < nD; ++iD) {
			//   Int_t idD = part->GetDaughter(iD);
			//   TParticle* daughter = (TParticle*) particles->At(idD);
			//   Int_t pdgD = daughter->GetPdgCode(); 
			//   if (pdgD == 25) break;
			//   if (idD > last) last = idD;
			// }
		}

		TParticle* lastParticleHiggs = (TParticle*) particles->At(lastHiggs);
		Float_t pT_last_H = lastParticleHiggs->Pt();
		h10->Fill(pT_last_H);
		Float_t y_last_H = lastParticleHiggs->Y();
		h20->Fill(y_last_H);
		Float_t eta_last_H = lastParticleHiggs->Eta();
		h30->Fill(eta_last_H);
		Float_t E_last_H = lastParticleHiggs->Energy();
		h40->Fill(E_last_H);

		TParticle* lastParticleJ = (TParticle*) particles->At(lastJpsi);
		Float_t pT_last_J = lastParticleJ->Pt();
		h11->Fill(pT_last_J);
		Float_t y_last_J = lastParticleJ->Y();
		h21->Fill(y_last_J);
		Float_t eta_last_J = lastParticleJ->Eta();
		h31->Fill(eta_last_J);
		Float_t E_last_J = lastParticleJ->Energy();
		h41->Fill(E_last_J);

		TParticle* lastParticlem = (TParticle*) particles->At(lastMuon);
		Float_t pT_last_m = lastParticlem->Pt();
		h12->Fill(pT_last_m);
		Float_t y_last_m = lastParticlem->Y();
		h22->Fill(y_last_m);
		Float_t eta_last_m = lastParticlem->Eta();
		h32->Fill(eta_last_m);
		Float_t E_last_m = lastParticlem->Energy();
		h42->Fill(E_last_m);
		TParticle* lastParticleam = (TParticle*) particles->At(lastAntiMuon);
		Float_t pT_last_am = lastParticleam->Pt();
		h12->Fill(pT_last_am);
		Float_t y_last_am = lastParticleam->Y();
		h22->Fill(y_last_am);
		Float_t eta_last_am = lastParticleam->Eta();
		h32->Fill(eta_last_am);
		Float_t E_last_am = lastParticleam->Energy();
		h42->Fill(E_last_am);

		TParticle* lastParticlegamma = (TParticle*) particles->At(lastGamma);
		Float_t pT_last_gamma = lastParticlegamma->Pt();
		h13->Fill(pT_last_gamma);
		Float_t y_last_gamma = lastParticlegamma->Y();
		h23->Fill(y_last_gamma);
		Float_t eta_last_gamma = lastParticlegamma->Eta();
		h33->Fill(eta_last_gamma);
		Float_t E_last_gamma = lastParticlegamma->Energy();
		h43->Fill(E_last_gamma);
		
		Float_t p_last_gamma = lastParticlegamma->P();
		Float_t p_last_J = lastParticleJ->P();
		Float_t p_last_Higgs = lastParticleHiggs->P();
		h01->Fill(sqrt(E_last_gamma*E_last_gamma-p_last_gamma*p_last_gamma)+sqrt(E_last_J*E_last_J-p_last_J*p_last_J));
		h00->Fill(p_last_Higgs-p_last_gamma-p_last_J);
	}

	TText* t1 = new TText(120,40,"nEvents = 1000");
	TText* t2 = new TText(120,50,"Pythia generator results");
	TLatex t3;
	
	c1->Divide(2,2);
	// c1->cd(1); h10->Draw();
	// c1->cd(2); h20->Draw();
	// c1->cd(3); h30->Draw();
	// c1->cd(4); h40->Draw();
	// c1->cd(1); t1->Draw(); t2->Draw();
	// c1->Print("higgs_hists.pdf(");
	// c1->cd(1); h11->Draw();
	// c1->cd(2); h21->Draw();
	// c1->cd(3); h31->Draw();
	// c1->cd(4); h41->Draw();
	// c1->Print("higgs_hists.pdf");
	// c1->cd(1); h12->Draw();
	// c1->cd(2); h22->Draw();
	// c1->cd(3); h32->Draw();
	// c1->cd(4); h42->Draw();
	// c1->cd(1); t3.DrawLatex(30,120,"Both #mu^{-} and #mu^{+} are counted");
	// c1->Print("higgs_hists.pdf");
	// c1->cd(1); h13->Draw();
	// c1->cd(2); h23->Draw();
	// c1->cd(3); h33->Draw();
	// c1->cd(4); h43->Draw();
	// c1->Print("higgs_hists.pdf)");
        c1->cd(1); h00->Draw();
	c1->cd(2); h01->Draw();
	c1->Print("check_hists.pdf");


	pythia->PrintStatistics();		 // print out pythia statistics

	// Save ROOT output to file
	t->Print();
	t->Write();
	f->Close();	
	delete f;
	
	return 0;
} // End main program with error-free return.
