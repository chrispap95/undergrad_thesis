#ifndef __CINT__
#include <TMath.h>
#include <TTree.h>
#include <TFile.h>
#include <TClonesArray.h>
#include <TParticle.h>
#endif

Float_t DeltaR(TParticle* part, TParticle* candidate) {
	Float_t DeltaPhi;
	Float_t DeltaPhip = part->Phi()-candidate->Phi();
	Float_t DeltaPhim = abs(part->Phi()-candidate->Phi()-TMath::TwoPi());
	Float_t DeltaEta = part->Eta()-candidate->Eta();
	if (DeltaPhip > DeltaPhim) DeltaPhi = DeltaPhim;
	else DeltaPhi = DeltaPhip;
	return sqrt(DeltaPhi*DeltaPhi+DeltaEta*DeltaEta);
}

Float_t Isolation(Int_t l, TParticle* part, TClonesArray* particles) {
	Float_t isol = 0;
	for (Long64_t k = 0; k < particles->GetEntries(); ++k) {
		TParticle* candidate = reinterpret_cast< TParticle* >(particles->At(k));
		Bool_t cut2 = candidate->Pt() > 0.1 && candidate->Eta() < 2.4 && candidate->Eta() > -2.4;
		if (cut2 && candidate->GetStatusCode() > 0 && k!=l && k!=part->GetDaughter(0) && k!=part->GetDaughter(1)) {
			Float_t deltaR = DeltaR(part, candidate);
			TParticlePDG* candpdg = candidate->GetPDG(0);
			if (deltaR < 0.4 && candpdg) {
				Float_t pt = candidate->Pt();
				Float_t mass = candidate->GetMass();
				Float_t Et = sqrt(pt*pt+mass*mass);
				isol += Et;
				if (candpdg->Charge()!=0) isol += pt;
			}
		}
	}
	return isol;
}

Int_t FindLastParticle(Int_t iPart, Int_t pdgCode, TClonesArray* particles) { //Find the last Jpsi
	while (1) {
		TParticle* part = reinterpret_cast< TParticle* >(particles->At(iPart));
		Int_t daughter0id = part->GetDaughter(0);
		Int_t daughter1id = part->GetDaughter(1);
		Bool_t daughter0validity = true;
		Bool_t daughter1validity = true;
		if (daughter0id >= 0) {
			TParticle* daughter0 = reinterpret_cast< TParticle* >(particles->At(daughter0id));
			if (daughter0->GetPdgCode() == pdgCode) {
				iPart = part->GetDaughter(0);
				daughter0validity = false;
				continue;
			}
		}
		if (daughter1id >= 0) {
			TParticle* daughter1 = reinterpret_cast< TParticle* >(particles->At(daughter1id));
			if (daughter1->GetPdgCode() == pdgCode) {
				iPart = part->GetDaughter(1);
				daughter1validity = false;
				continue;
			}
		}
		if (daughter0validity && daughter1validity) break;
	}
	return iPart;
}

void generator_ptcuts() {
	TStopwatch t;

	//Define all the histograms
	TCanvas* c2 = new TCanvas("c2", "trial analysis", 1);
	TH1I* hcountb = new TH1I("hcountb","B: counts for bkg;pT cut (GeV/c)",100, 5, 35);
	TH1I* hcounts = new TH1I("hcounts","S: counts for signal;pT cut (GeV/c)",100, 5, 35);
	TH1D* hsb = new TH1D("hsb","S/B p_{T} cut for #gamma;p_{T} cut (GeV/c); S/B",100, 5, 35);
	TH1D* hsbsq = new TH1D("hsbsq","S/#sqrt{B} p_{T} cut for #gamma;p_{T} cut (GeV/c); S/#sqrt{B}",100, 5, 35);

	//Create array of counts
	Int_t countb[101]; //1-100 bins content
	Int_t counts[101]; //1-100 bins content
	for (Int_t i = 0; i < 101; ++i) {
		countb[i] = 0;
		counts[i] = 0;
	}
	
	//Insert the .root file and get the tree and its Event branch
        TFile* f1 = TFile::Open("/data/cpapage/jpsiInclusive-gen100K.root");
        TTree* t1 = dynamic_cast< TTree* >(f1->Get("Pythia"));
        TClonesArray* particles1 = new TClonesArray("Event");
        t1->SetBranchAddress("Event", &particles1);
        for (Long64_t i = 0; i < t1->GetEntries(); ++i) { // This is the Event loop 
                t1->GetEntry(i);
                for (Long64_t l = 0; l < particles1->GetEntries(); ++l) { //This is a particle loop
                        TParticle* part = reinterpret_cast< TParticle* >(particles1->At(l));
			Bool_t cut1 = part->Eta() < 2.4 && part->Eta() > -2.4;
			Float_t pT = part->Pt();
			if (part->GetPdgCode() == 111 && cut1 && pT > 5 ) {
				Int_t iJpsi = 0;
				for (Int_t k = 0; k < particles1->GetEntries(); ++k) {
					TParticle* jpsi = reinterpret_cast< TParticle* >(particles1->At(k));
					if (part->GetPdgCode() == 443) {
						iJpsi = k;
						break;
					}
				}
				iJpsi = FindLastParticle(iJpsi, 443, particles1);
				TParticle* jpsi = reinterpret_cast< TParticle* >(particles1->At(iJpsi));
				Float_t energy = jpsi->Energy()+part->Energy();
				Float_t px = jpsi->Px()+part->Px();
				Float_t py = jpsi->Py()+part->Py();
				Float_t pz = jpsi->Pz()+part->Pz();
				Float_t mass = sqrt(energy*energy-px*px-py*py-pz*pz);
				Bool_t cut_mass = mass > 115 && mass < 135;
				if (cut_mass) {
					if (Isolation(l, part, particles1) < 0.5) {
						Float_t dbin = (pT-5)/0.3;
						for (Int_t ibin = 0; ibin < (int)dbin && ibin < 101; ++ibin) {
							++countb[ibin];
						}
					}
				}
			}
		}
	}

	//Insert the .root file and get the tree and its Event branch
        TFile* f2 = TFile::Open("/data/cpapage/higgsTojpsiGamma-gen.root");
        TTree* t2 = dynamic_cast< TTree* >(f2->Get("Pythia"));
        TClonesArray* particles2 = new TClonesArray("Event");
        t2->SetBranchAddress("Event", &particles2);
        for (Long64_t i = 0; i < t2->GetEntries(); ++i) { // This is like the Event loop 
                t2->GetEntry(i);
		
		Int_t iHiggs = 0;
		for (Long64_t l = 0; l < particles2->GetEntries(); ++l) { //This is a particle loop
			TParticle* part = reinterpret_cast< TParticle* >(particles2->At(l));
			if (part->GetPdgCode() == 25) {
				iHiggs = l;
				break;
			}
		}
		iHiggs = FindLastParticle(iHiggs, 25, particles2);
		Int_t iGamma = iHiggs;
		iGamma = FindLastParticle(iGamma, 22, particles2);
		Int_t iJpsi = iHiggs;
		iJpsi = FindLastParticle(iJpsi, 443, particles2);
		Int_t iMuon = iJpsi;
		iMuon = FindLastParticle(iMuon, 13, particles2);
		Int_t iAntimuon = iJpsi;
		iAntimuon = FindLastParticle(iAntimuon, -13, particles2);

		TParticle* gamma = reinterpret_cast< TParticle* >(particles2->At(iGamma));
		TParticle* muon = reinterpret_cast< TParticle* >(particles2->At(iMuon));
		TParticle* antimuon = reinterpret_cast< TParticle* >(particles2->At(iAntimuon));
		Bool_t cut1 = gamma->Eta() < 2.4 && gamma->Eta() > -2.4 && gamma->Pt() > 5;
		//Bool_t cut2 = muon->Eta() < 2.4 && muon->Eta() > -2.4;
		//Bool_t cut3 = antimuon->Eta() < 2.4 && antimuon->Eta() > -2.4;
		if (cut1) {
			Float_t pT = gamma->Pt();
			Float_t dbin = (pT-5)/0.3;
			for (Int_t ibin = 0; ibin < (int)dbin && ibin < 101; ++ibin) {
				++counts[ibin];
			}	
		}	
	}

	Int_t countb_norm[101];
	Int_t counts_norm[101];
	for (Int_t i = 1; i<101; ++i) {
		countb_norm[i] = countb[i];
		counts_norm[i] = counts[i];
	}
	for (Int_t i = 1; i<101; ++i) {
		countb_norm[i] *= 56600;
		counts_norm[i] *= 3.7*0.00246;
	}

	for (Int_t i = 1; i<101; ++i) {
		if (countb_norm[i] >= 1) {
			hsb->SetBinContent(i, (double)counts_norm[i]/(double)countb_norm[i]);
			hsbsq->SetBinContent(i, counts_norm[i]/sqrt(countb_norm[i]));
			hcounts->SetBinContent(i, counts[i]);
			hcountb->SetBinContent(i, countb[i]);
		}
		else {
			hsb->SetBinContent(i, 0);
			hsbsq->SetBinContent(i, 0);
			hcounts->SetBinContent(i, counts[i]);
			hcountb->SetBinContent(i, countb[i]);
		}
	}

	c2->Divide(2,2);
	c2->cd(1); 
	hcounts->Draw();
	c2->cd(2);
	hcountb->Draw();
        c2->Print("generator_ptcuts_100K.pdf(");
	c2->Clear();
	hsb->Draw();
        c2->Print("generator_ptcuts_100K.pdf");
	hsbsq->Draw();
        c2->Print("generator_ptcuts_100K.pdf)");

	t.Stop();
	t.Print();
}
